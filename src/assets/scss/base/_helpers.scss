// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

/// importing
// responsive utility
@import
  './helpers/responsive-embed',
  './helpers/responsive-utilities';


/**
 * Clear inner floats
 */
.clearfix::after {
  clear: both;
  content: '';
  display: table;
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
  overflow: hidden;
  padding: 0; /* 1 */
  text-indent: 101%;
  white-space: nowrap;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/* Color */
@each $hue, $variable in $colors {
  @each $blackness, $value in $variable {
    // @if $color_type=='base' {
    //   .#{$color_name} {
    //     background-color: $color_value !important;
    //   }
    //   .#{$color_name}-text {
    //     color: $color_value !important;
    //   }
    // }
    // @else if $color_name !='shades' {
    //   .#{$color_name}.#{$color_type} {
    //     background-color: $color_value !important;
    //   }
    //   .#{$color_name}-text.text-#{$color_type} {
    //     color: $color_value !important;
    //   }
    // }
    .#{$hue}#{$blackness} {
      background-color: $value;
      fill: $value;
    }
  }
}
@mixin setTxtColor() {
  $types: (
    'primary': $PRIMARY_COLOR,
    'secondary': $SECONDARY_COLOR-0,
    'success': $SUCCESS_COLOR,
    'danger': $DANGER_COLOR,
    'warning': $WARNING_COLOR
  );

  @each $type, $color in $types {
      .#{$type}-text {
        color: $color !important;
      }
  }
}
@include setTxtColor();

/* Z-levels */
.z-depth-0 {
  box-shadow: none !important;
}
.z-depth-1 {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
              0 3px 1px -2px rgba(0, 0, 0, 0.12),
              0 1px 5px 0 rgba(0, 0, 0, 0.2);
}
.z-depth-1-half {
  box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.14),
              0 1px 7px 0 rgba(0, 0, 0, 0.12),
              0 3px 1px -1px rgba(0, 0, 0, 0.2);
}
.z-depth-2 {
  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),
              0 1px 10px 0 rgba(0, 0, 0, 0.12),
              0 2px 4px -1px rgba(0, 0, 0, 0.3);
}
.z-depth-3 {
  box-shadow: 0 8px 17px 2px rgba(0, 0, 0, 0.14),
              0 3px 14px 2px rgba(0, 0, 0, 0.12),
              0 5px 5px -3px rgba(0, 0, 0, 0.2);
}
.z-depth-4 {
  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14),
              0 6px 30px 5px rgba(0, 0, 0, 0.12),
              0 8px 10px -7px rgba(0, 0, 0, 0.2);
}
.z-depth-5 {
  box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),
              0 9px 46px 8px rgba(0, 0, 0, 0.12),
              0 11px 15px -7px rgba(0, 0, 0, 0.2);
}














.clear10 { width:100%; height:10px; clear:both; }
.clear20 { width:100%; height:20px; clear:both; }
.clear30 { width:100%; height:30px; clear:both; }
.clear40 { width:100%; height:40px; clear:both; }
.clear50 { width:100%; height:50px; clear:both; }
.clear60 { width:100%; height:60px; clear:both; }
.clear80 { width:100%; height:80px; clear:both; }